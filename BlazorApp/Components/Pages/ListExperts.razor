@page "/listexperts"
@attribute [StreamRendering]

<PageTitle>List of Experts</PageTitle>

<h1>Experts</h1>

<p>This component demonstrates showing data.</p>

@if (profiles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var profile in profiles)
            {
                <tr>
                    <td>@profile.Id</td>
                    <td>@profile.FirstName</td>
                    <td>@profile.LastName</td>
                </tr>
            }
        </tbody>
    </table>
}

@* @code {
public class Profile
{
public int Id { get; set; }

public string FirstName { get; set; }
public string LastName { get; set; }
public string OrgName { get; set; }

public bool IsOrg { get; set; }

public Profile() { }
}
private WeatherForecast[]? forecasts;
private List<Profile> profiles;

private Profile profile;


protected override async Task OnInitializedAsync()
{
profiles = new List<Profile>();
profile = new Profile() { Id = 1, FirstName = "Emma", LastName = "Simpson", OrgName = "UoM" };
profiles.Add(profile);
profile = new Profile() { Id = 2, FirstName = "April", LastName = "Simpson", OrgName = "UoM" };
profiles.Add(profile);
profile = new Profile() { Id = 3, FirstName = "Karen", LastName = "Simpson", OrgName = "UoM" };
profiles.Add(profile);
// Simulate asynchronous loading to demonstrate streaming rendering
await Task.Delay(500);

var startDate = DateOnly.FromDateTime(DateTime.Now);
var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering",
"Scorching" };
forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
{
Date = startDate.AddDays(index),
TemperatureC = Random.Shared.Next(-20, 55),
Summary = summaries[Random.Shared.Next(summaries.Length)]
}).ToArray();
}

private class WeatherForecast
{
public DateOnly Date { get; set; }
public int TemperatureC { get; set; }
publ
public class Profile
{
public int Id { get; set; }

public string FirstName { get; set; }
public string LastName { get; set; }
public string OrgName { get; set; }

public bool IsOrg { get; set; }

public Profile() { }
}
private WeatherForecast[]? forecasts;
private List<Profile> profiles;

private Profile profile;


protected override async Task OnInitializedAsync()
{
profiles = new List<Profile>();
profile = new Profile() { Id = 1, FirstName = "Emma", LastName = "Simpson", OrgName = "UoM" };
profiles.Add(profile);
profile = new Profile() { Id = 2, FirstName = "April", LastName = "Simpson", OrgName = "UoM" };
profiles.Add(profile);
profile = new Profile() { Id = 3, FirstName = "Karen", LastName = "Simpson", OrgName = "UoM" };
profiles.Add(profile);
// Simulate asynchronous loading to demonstrate streaming rendering
await Task.Delay(500);

var startDate = DateOnly.FromDateTime(DateTime.Now);
var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering",
"Scorching" };
forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
{
Date = startDate.AddDays(index),
TemperatureC = Random.Shared.Next(-20, 55),
Summary = summaries[Random.Shared.Next(summaries.Length)]
}).ToArray();
}

private class WeatherForecast
{
public DateOnly Date { get; set; }
public int TemperatureC { get; set; }
public string? Summary { get; set; }
public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
}
} *@
